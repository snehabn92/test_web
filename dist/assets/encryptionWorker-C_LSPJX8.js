(function(){"use strict";async function i(e,a,c){console.log("Encrypting frame data...",e);const t=new TransformStream({async transform(n,r){await p(e,n,r)}});a.pipeThrough(t).pipeTo(c)}async function y(e,a,c){console.log("Decrypting frame data...",e);const t=new TransformStream({async transform(n,r){await d(e,n,r)}});a.pipeThrough(t).pipeTo(c)}async function p(e,a,c){if(e){const t=crypto.getRandomValues(new Uint8Array(12)),n=new Uint8Array(a.data),r=await crypto.subtle.encrypt({name:"AES-GCM",iv:t},e,n),o=new Uint8Array(t.byteLength+r.byteLength);o.set(t),o.set(new Uint8Array(r),t.byteLength),a.data=o.buffer}c.enqueue(a)}async function d(e,a,c){if(e){const t=new Uint8Array(a.data),n=t.slice(0,12),r=t.slice(12),o=await crypto.subtle.decrypt({name:"AES-GCM",iv:n},e,r);a.data=o}c.enqueue(a)}let s;self.onmessage=async e=>{const{action:a,key:c,readable:t,writable:n,shouldSendEncryptionKey:r}=e.data;switch(a){case"generateKey":await u(),self.postMessage({action:"generatedKey",key:s});break;case"setKey":await m(c);break;case"encrypt":await i(s,t,n);break;case"decrypt":await y(r?s:void 0,t,n);break}};async function u(){s=await crypto.subtle.generateKey({name:"AES-GCM",length:256},!0,["encrypt","decrypt"])}async function m(e){s=await crypto.subtle.importKey("raw",e,{name:"AES-GCM"},!0,["encrypt","decrypt"]),console.log("Key set:",s)}})();
